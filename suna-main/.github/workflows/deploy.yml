name: Deploy SUNA to AWS

# ECS 배포 비활성화 - EC2 배포 사용
# on:
#   push:
#     branches: [ develop ]
#   workflow_dispatch: # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  ECS_CLUSTER: aibee-cluster
  ECS_SERVICE_BACKEND: suna-backend-service
  ECS_SERVICE_FRONTEND: suna-frontend-service
  ECS_SERVICE_WORKER: suna-worker-service

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image to Amazon ECR
      id: build-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: suna-backend
        IMAGE_TAG: ${{ github.sha }}
        # All backend environment variables hardcoded
        ENV_MODE: production
        SUPABASE_URL: https://oupvawyejyteixggrfat.supabase.co
        SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91cHZhd3llanl0ZWl4Z2dyZmF0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwNjM5NTUsImV4cCI6MjA3MDYzOTk1NX0.0B1PlWkBFW-QFVk2yVtMVyyWbXYWUeO8a48FDZvcFdA
        SUPABASE_SERVICE_ROLE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91cHZhd3llanl0ZWl4Z2dyZmF0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTA2Mzk1NSwiZXhwIjoyMDcwNjM5OTU1fQ.7KhANy2DpIDk61a7Osl630tuR_yrMG3hlhQW-vg_1YA
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: 6379
        REDIS_PASSWORD: ""
        REDIS_SSL: "False"
        OPENAI_API_KEY: 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
        ANTHROPIC_API_KEY: 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
        OPENROUTER_API_KEY: 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
        MORPH_API_KEY: ""
        GEMINI_API_KEY: ""
        MODEL_TO_USE: ollama/deepseek-r1:32b
        OLLAMA_HOST: http://172.31.4.124:11435
        TAVILY_API_KEY: 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
        FIRECRAWL_API_KEY: fc-fbfc7efc40174069b30cde0fb5e84da3
        FIRECRAWL_URL: https://api.firecrawl.dev
        RAPID_API_KEY: ""
        SLACK_CLIENT_ID: ""
        SLACK_CLIENT_SECRET: ""
        SLACK_REDIRECT_URI: ""
        WEBHOOK_BASE_URL: https://33bca0907e26.ngrok-free.app
        TRIGGER_WEBHOOK_SECRET: d522ced715bbec24eda5ad1c6971ec383ee1a6780aefe122144e421d297905de
        MCP_CREDENTIAL_ENCRYPTION_KEY: Wrb0dxo0VG2t4AdXKolo9osrRurtlnYOpgm5MkPUPgE=
        PIPEDREAM_PROJECT_ID: ""
        PIPEDREAM_CLIENT_ID: ""
        PIPEDREAM_CLIENT_SECRET: ""
        PIPEDREAM_X_PD_ENVIRONMENT: ""
        DAYTONA_API_KEY: dtn_a89150f22c3a2b0fbb9e61ef02761899c36f1ef2798091a4c7511d932f14d2b7
        DAYTONA_SERVER_URL: https://app.daytona.io/api
        DAYTONA_TARGET: us
        KORTIX_ADMIN_API_KEY: 8b652c6283dd9810ea7af45731dda5c754a0bde66ccfd977a3bfec3d039e8e2a
        COMPOSIO_API_KEY: ak_ljggW_Xz4K806q8q4JZ-
        MAILTRAP_API_TOKEN: 84d290b28dc8a3278eab381b7a6e47da
        MAILTRAP_SENDER_EMAIL: noreply@suna.so
        MAILTRAP_SENDER_NAME: Suna Team
        NEXT_PUBLIC_URL: http://localhost:3000
        GROUPWARE_ENCRYPTION_KEY: B4k3R6lpR_4wYSRRQRLLtRalF4-RtIW_URBq8W5l6tk=
      run: |
        cd backend
        docker build \
          --build-arg ENV_MODE=production \
          --build-arg SUPABASE_URL=https://oupvawyejyteixggrfat.supabase.co \
          --build-arg SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91cHZhd3llanl0ZWl4Z2dyZmF0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwNjM5NTUsImV4cCI6MjA3MDYzOTk1NX0.0B1PlWkBFW-QFVk2yVtMVyyWbXYWUeO8a48FDZvcFdA \
          --build-arg SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91cHZhd3llanl0ZWl4Z2dyZmF0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTA2Mzk1NSwiZXhwIjoyMDcwNjM5OTU1fQ.7KhANy2DpIDk61a7Osl630tuR_yrMG3hlhQW-vg_1YA \
          --build-arg REDIS_HOST=${{ secrets.REDIS_HOST }} \
          --build-arg REDIS_PORT=6379 \
          --build-arg OPENAI_API_KEY=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 \
          --build-arg ANTHROPIC_API_KEY=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 \
          --build-arg MODEL_TO_USE=ollama/deepseek-r1:32b \
          --build-arg OLLAMA_HOST=http://172.31.4.124:11435 \
          --build-arg KORTIX_ADMIN_API_KEY=8b652c6283dd9810ea7af45731dda5c754a0bde66ccfd977a3bfec3d039e8e2a \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push frontend image to Amazon ECR
      id: build-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: suna-frontend
        IMAGE_TAG: ${{ github.sha }}
        # All environment variables hardcoded
        NEXT_PUBLIC_ENV_MODE: production
        NEXT_PUBLIC_SUPABASE_URL: https://oupvawyejyteixggrfat.supabase.co
        NEXT_PUBLIC_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91cHZhd3llanl0ZWl4Z2dyZmF0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwNjM5NTUsImV4cCI6MjA3MDYzOTk1NX0.0B1PlWkBFW-QFVk2yVtMVyyWbXYWUeO8a48FDZvcFdA
        NEXT_PUBLIC_BACKEND_URL: http://suna-backend-service.aibee-cluster:8000/api
        NEXT_PUBLIC_URL: http://localhost:3000
        NEXT_PUBLIC_GOOGLE_CLIENT_ID: ""
        NEXT_PUBLIC_POSTHOG_KEY: ""
        SUPABASE_SERVICE_ROLE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91cHZhd3llanl0ZWl4Z2dyZmF0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTA2Mzk1NSwiZXhwIjoyMDcwNjM5OTU1fQ.7KhANy2DpIDk61a7Osl630tuR_yrMG3hlhQW-vg_1YA
        OPENAI_API_KEY: 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
        KORTIX_ADMIN_API_KEY: 8b652c6283dd9810ea7af45731dda5c754a0bde66ccfd977a3bfec3d039e8e2a
        ANTHROPIC_API_KEY: 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
        OPENROUTER_API_KEY: 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
        MORPH_API_KEY: ""
        GEMINI_API_KEY: ""
        MODEL_TO_USE: ollama/deepseek-r1:32b
        OLLAMA_HOST: http://172.31.4.124:11435
        TAVILY_API_KEY: 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
        FIRECRAWL_API_KEY: fc-fbfc7efc40174069b30cde0fb5e84da3
        FIRECRAWL_URL: https://api.firecrawl.dev
        RAPID_API_KEY: ""
        SLACK_CLIENT_ID: ""
        SLACK_CLIENT_SECRET: ""
        SLACK_REDIRECT_URI: ""
        WEBHOOK_BASE_URL: https://33bca0907e26.ngrok-free.app
        TRIGGER_WEBHOOK_SECRET: d522ced715bbec24eda5ad1c6971ec383ee1a6780aefe122144e421d297905de
        MCP_CREDENTIAL_ENCRYPTION_KEY: Wrb0dxo0VG2t4AdXKolo9osrRurtlnYOpgm5MkPUPgE=
        PIPEDREAM_PROJECT_ID: ""
        PIPEDREAM_CLIENT_ID: ""
        PIPEDREAM_CLIENT_SECRET: ""
        PIPEDREAM_X_PD_ENVIRONMENT: ""
        DAYTONA_API_KEY: dtn_a89150f22c3a2b0fbb9e61ef02761899c36f1ef2798091a4c7511d932f14d2b7
        DAYTONA_SERVER_URL: https://app.daytona.io/api
        DAYTONA_TARGET: us
        COMPOSIO_API_KEY: ak_ljggW_Xz4K806q8q4JZ-
        MAILTRAP_API_TOKEN: 84d290b28dc8a3278eab381b7a6e47da
        MAILTRAP_SENDER_EMAIL: noreply@suna.so
        MAILTRAP_SENDER_NAME: Suna Team
        GROUPWARE_ENCRYPTION_KEY: B4k3R6lpR_4wYSRRQRLLtRalF4-RtIW_URBq8W5l6tk=
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: 6379
      run: |
        cd frontend
        docker build \
          --build-arg NEXT_PUBLIC_ENV_MODE=production \
          --build-arg NEXT_PUBLIC_SUPABASE_URL=https://oupvawyejyteixggrfat.supabase.co \
          --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91cHZhd3llanl0ZWl4Z2dyZmF0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwNjM5NTUsImV4cCI6MjA3MDYzOTk1NX0.0B1PlWkBFW-QFVk2yVtMVyyWbXYWUeO8a48FDZvcFdA \
          --build-arg NEXT_PUBLIC_BACKEND_URL=http://suna-backend-service.aibee-cluster:8000/api \
          --build-arg NEXT_PUBLIC_URL=https://suna.so \
          --build-arg NEXT_PUBLIC_GOOGLE_CLIENT_ID="" \
          --build-arg NEXT_PUBLIC_POSTHOG_KEY="" \
          --build-arg SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91cHZhd3llanl0ZWl4Z2dyZmF0Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTA2Mzk1NSwiZXhwIjoyMDcwNjM5OTU1fQ.7KhANy2DpIDk61a7Osl630tuR_yrMG3hlhQW-vg_1YA \
          --build-arg OPENAI_API_KEY=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 \
          --build-arg KORTIX_ADMIN_API_KEY=8b652c6283dd9810ea7af45731dda5c754a0bde66ccfd977a3bfec3d039e8e2a \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition for backend
      run: |
        aws ecs describe-task-definition \
          --task-definition suna-backend-task \
          --query taskDefinition > backend-task-definition.json

    - name: Update backend task definition
      id: backend-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v2
      with:
        task-definition: backend-task-definition.json
        container-name: suna-backend
        image: ${{ steps.build-backend.outputs.image }}

    - name: Deploy backend to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        wait-for-service-stability-timeout: 40m

    - name: Download task definition for worker
      run: |
        aws ecs describe-task-definition \
          --task-definition suna-worker-task \
          --query taskDefinition > worker-task-definition.json

    - name: Update worker task definition
      id: worker-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v2
      with:
        task-definition: worker-task-definition.json
        container-name: suna-worker
        image: ${{ steps.build-backend.outputs.image }}

    - name: Deploy worker to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.worker-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_WORKER }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        wait-for-service-stability-timeout: 40m

    - name: Download task definition for frontend
      run: |
        aws ecs describe-task-definition \
          --task-definition suna-frontend-task \
          --query taskDefinition > frontend-task-definition.json

    - name: Update frontend task definition
      id: frontend-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v2
      with:
        task-definition: frontend-task-definition.json
        container-name: suna-frontend
        image: ${{ steps.build-frontend.outputs.image }}

    - name: Deploy frontend to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        wait-for-service-stability-timeout: 40m

    - name: Deployment Success Notification
      run: |
        echo "SUNA 배포 완료!"
        echo "Backend Image: ${{ steps.build-backend.outputs.image }}"
        echo "Frontend Image: ${{ steps.build-frontend.outputs.image }}"