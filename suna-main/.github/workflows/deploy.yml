name: Deploy SUNA to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch: # ÏàòÎèô Ïã§Ìñâ Í∞ÄÎä•

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  ECS_CLUSTER: aibee-cluster
  ECS_SERVICE_BACKEND: suna-backend-service
  ECS_SERVICE_FRONTEND: suna-frontend-service
  ECS_SERVICE_WORKER: suna-worker-service

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image to Amazon ECR
      id: build-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: suna-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push frontend image to Amazon ECR
      id: build-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: suna-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition for backend
      run: |
        aws ecs describe-task-definition \
          --task-definition suna-backend-task \
          --query taskDefinition > backend-task-definition.json

    - name: Update backend task definition
      id: backend-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: backend-task-definition.json
        container-name: suna-backend
        image: ${{ steps.build-backend.outputs.image }}

    - name: Deploy backend to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Download task definition for worker
      run: |
        aws ecs describe-task-definition \
          --task-definition suna-worker-task \
          --query taskDefinition > worker-task-definition.json

    - name: Update worker task definition
      id: worker-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: worker-task-definition.json
        container-name: suna-worker
        image: ${{ steps.build-backend.outputs.image }}

    - name: Deploy worker to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.worker-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_WORKER }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Download task definition for frontend
      run: |
        aws ecs describe-task-definition \
          --task-definition suna-frontend-task \
          --query taskDefinition > frontend-task-definition.json

    - name: Update frontend task definition
      id: frontend-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: frontend-task-definition.json
        container-name: suna-frontend
        image: ${{ steps.build-frontend.outputs.image }}

    - name: Deploy frontend to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Deployment Success Notification
      run: |
        echo "üöÄ SUNA Î∞∞Ìè¨ ÏôÑÎ£å!"
        echo "Backend Image: ${{ steps.build-backend.outputs.image }}"
        echo "Frontend Image: ${{ steps.build-frontend.outputs.image }}"