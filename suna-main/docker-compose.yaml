services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backend/services/docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # rabbitmq:
  #   image: rabbitmq
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   volumes:
  #     - rabbitmq_data:/var/lib/rabbitmq
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 10s

  backend:
    image: ghcr.io/suna-ai/suna-backend:latest
    platform: linux/amd64
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${HOST_PORT:-8000}:8000"
    volumes:
      - ./backend/.env:/app/.env:ro
    env_file:
      - ./backend/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=False
      # - RABBITMQ_HOST=rabbitmq
      # - RABBITMQ_PORT=5672
      - OLLAMA_HOST=http://host.docker.internal:11435
      - MODEL_TO_USE=ollama/deepseek-r1:32b
    depends_on:
      redis:
        condition: service_healthy
      # rabbitmq:
      #   condition: service_healthy
      worker:
        condition: service_started

  worker:
    image: ghcr.io/suna-ai/suna-backend:latest
    platform: linux/amd64
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uv run dramatiq --skip-logging --processes 4 --threads 4 run_agent_background
    volumes:
      - ./backend/.env:/app/.env:ro
    env_file:
      - ./backend/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=False
      # - RABBITMQ_HOST=rabbitmq
      # - RABBITMQ_PORT=5672
      - OLLAMA_HOST=http://host.docker.internal:11435
      - MODEL_TO_USE=ollama/deepseek-r1:32b
    depends_on:
      redis:
        condition: service_healthy
      # rabbitmq:
      #   condition: service_healthy


  frontend:
    init: true
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_ENV_MODE=LOCAL
        - NEXT_PUBLIC_SUPABASE_URL=https://oupvawyejyteixggrfat.supabase.co
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91cHZhd3llanl0ZWl4Z2dyZmF0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwNjM5NTUsImV4cCI6MjA3MDYzOTk1NX0.0B1PlWkBFW-QFVk2yVtMVyyWbXYWUeO8a48FDZvcFdA
        # ----- 로컬 개발용 설정 -----
        # - NEXT_PUBLIC_BACKEND_URL=http://localhost:8000/api
        # - NEXT_PUBLIC_URL=http://localhost:3000
        - NEXT_PUBLIC_BACKEND_URL=http://localhost:8000/api
        # ----- AWS 배포용 설정 -----
        - NEXT_PUBLIC_BACKEND_URL=http://44.222.82.89:8000/api
        - NEXT_PUBLIC_URL=http://44.222.82.89
        - KORTIX_ADMIN_API_KEY=8b652c6283dd9810ea7af45731dda5c754a0bde66ccfd977a3bfec3d039e8e2a
    ports:
      # ----- 로컬 개발용 포트 -----
      # - "3000:3000"
      # ----- AWS 배포용 포트 (80번으로 외부 접속) -----
      - "80:3000"
    env_file:
      - ./frontend/.env.local
    depends_on:
      - backend

  browser-sandbox:
    image: kortix/suna:0.1.3.5
    container_name: suna-main-browser-sandbox-1
    restart: unless-stopped
    ports:
      - "5901:5901"   # VNC
      - "6080:6080"   # noVNC web interface
      - "8004:8004"   # Stagehand API
      - "8080:8080"   # HTTP proxy
      - "9222:9222"   # Chrome DevTools Protocol
    shm_size: 2g      # Increased shared memory for Chrome
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/api"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  redis_data:
  # rabbitmq_data:
